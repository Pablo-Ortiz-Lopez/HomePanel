esphome:
  name: "dimmer-prototype"
  friendly_name: Dimmer

esp8266:
  board: esp01_1m

logger:

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dimmer"
    password: !secret wifi_password

captive_portal:

output:
  - platform: ac_dimmer
    id: dimmer1
    gate_pin: GPIO12
    init_with_half_cycle: true
    zero_cross_pin:
      number: GPIO13
      mode:
        input: true
      inverted: yes

light:
  - platform: monochromatic
    id: light_1
    restore_mode: ALWAYS_OFF 
    output: dimmer1
    name: Dimmerized Light
    gamma_correct: 4.0

remote_receiver:
  id: rf_rx
  tolerance: 20%
  pin: 
    number: GPIO14
  on_rc_switch:
    - lambda: |-
        static uint8_t lastID = 255;
        ESP_LOGD("custom", "RAWCode: %X Protocol: %d", x.code, x.protocol);
        uint8_t messageID = (x.code >> 10) & 0x7;
        uint16_t code = x.code & 0x3FF;

        if(lastID != messageID){
          ESP_LOGD("custom", "ID: %X, Code: %X", messageID, code);
          if(code == 0x59){
            id(light_1).toggle();
          }else if(code == 0x66){
            id(rf_action_increase).publish_state(true);
            id(rf_action_increase).publish_state(false);
          }else if(code == 0x73){
            id(rf_action_decrease).publish_state(true);
            id(rf_action_decrease).publish_state(false);
          }
          lastID = messageID;
        }

binary_sensor:
  - platform: template
    id: rf_action_increase
    on_press:
      then:
        - light.dim_relative:
            id: light_1
            relative_brightness: 10%
        - logger.log: "Received code for increasing brightness"
  - platform: template
    id: rf_action_decrease
    on_press:
      then:
        - light.dim_relative:
            id: light_1
            relative_brightness: -10%
        - logger.log: "Received code for decreasing brightness"
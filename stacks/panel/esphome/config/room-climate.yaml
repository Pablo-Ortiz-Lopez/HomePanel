esphome:
  name: "room-climate"
  friendly_name: "Climatizador del Dormitorio"

esp8266:
  board: esp01_1m

logger:
  level: info
  baud_rate: 0

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "OrtizMa Room Climate"
    password: !secret mqtt_password

captive_portal:

mqtt:
  broker: !secret mqtt_broker
  username: "pablo"
  password: !secret mqtt_password
  id: mqtt_client

remote_transmitter:
  pin: GPIO16
  carrier_duty_percent: 50%

climate:
  - platform: mitsubishi
    name: "AC"
    id: ac
    on_control:
      - delay: 1s
      - component.update: eink
    sensor: temperature

uart:
  rx_pin: GPIO3
  tx_pin: GPIO1
  baud_rate: 9600
  
sensor:
  - platform: senseair
    co2:
      name: "co2"
      id: co2
    update_interval: 60s
  - platform: dht
    pin: GPIO2
    temperature:
      name: "Temperature"
      id: temperature
      filters:
        - calibrate_linear:
          - 30.1 -> 24.4
          - 30.6 -> 24.8
          - 31.1 -> 25.8
          - 31.4 -> 26
          - 32 -> 26.6
    humidity:
      name: "Humidity"
      id: humidity
      filters:
        offset: 10
          
    update_interval: 15s
    
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_db
    update_interval: 5s

image:
  - file: "images/x.png"
    id: x_image
    resize: 25x25
    type: TRANSPARENT_IMAGE
  - file: "images/fire.png"
    id: fire_image
    resize: 70x70
    type: TRANSPARENT_IMAGE
  - file: "images/snowflake.png"
    id: snowflake_image
    resize: 55x55
    type: TRANSPARENT_IMAGE
  - file: "images/power.png"
    id: power_image
    resize: 90x90
    type: TRANSPARENT_IMAGE
  - file: "images/plug.png"
    id: plug_image
    resize: 25x25
    type: TRANSPARENT_IMAGE
    
font:
  - file: "gfonts://Roboto"
    id: roboto18
    size: 18
  - file: "gfonts://Roboto"
    id: roboto
    size: 25
  - file: "gfonts://Roboto"
    id: roboto_mid
    size: 45
  - file: "gfonts://Roboto"
    id: roboto_big
    size: 60

time:
  - id: reloj
    platform: sntp
    timezone: Europe/Madrid

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13

display:
  - platform: waveshare_epaper
    id: eink
    cs_pin: GPIO15
    dc_pin: GPIO12
    reset_pin: GPIO4
    busy_pin: GPIO5
    model: 1.54inv2
    rotation: 270
    full_update_every: 1
    update_interval: 60s
    reset_duration: 200ms
    lambda: |-
      it.image(5, 8, id(plug_image));
      
      auto time = id(reloj).now();
      
      if(time.is_valid()){
        it.printf(70,5,id(roboto), TextAlign::TOP_LEFT, "%02d:%02d", time.hour, time.minute);
      }

      if(id(wifi_db).has_state()){ // WIFI OK
        if (!id(mqtt_client)->is_connected()) { // MQTT KO
          it.printf(175, 5, id(roboto), TextAlign::TOP_LEFT , "!");
        }else{ // WIFI & MQTT OK
          it.filled_rectangle(150, 25, 8, 5); // 1 Bar

          if(id(wifi_db).has_state() && id(wifi_db).state > -90){ // 2 Bars
            it.filled_rectangle(160, 20, 8, 10);
          }else{
            it.rectangle(160, 20, 8, 10);
          }

          if(id(wifi_db).has_state() && id(wifi_db).state > -80){ // 3 Bars
            it.filled_rectangle(170, 15, 8, 15);
          }else{
            it.rectangle(170, 15, 8, 15);
          }

          if(id(wifi_db).has_state() && id(wifi_db).state > -70){ // 4 Bars
            it.filled_rectangle(180, 10, 8, 20);
          }else{
            it.rectangle(180, 10, 8, 20);
          }

          if(id(wifi_db).has_state() && id(wifi_db).state > -60){ // 5 Bars
            it.filled_rectangle(190, 5, 8, 25);
          }else{
            it.rectangle(190, 5, 8, 25);
          }
        }
      }else{ // WIFI KO
        it.image(175, 5, id(x_image));
      }
      
      if (id(humidity).has_state()) { // Humidity
        it.printf(5, 65, id(roboto), TextAlign::BOTTOM_LEFT , "%.1f%%", id(humidity).state);
      }else{
        it.printf(5, 65, id(roboto), TextAlign::BOTTOM_LEFT , "--.-%%");
      }
      it.printf(5, 88, id(roboto18), TextAlign::BOTTOM_LEFT , "Humedad");

      if (id(co2).has_state()) { //CO2
        if(id(co2).state > 1500){
          it.printf(118, 62, id(roboto18), TextAlign::BOTTOM_LEFT , "!");
          it.line(110, 60, 120, 40);
          it.line(120, 40, 130, 60);
          it.line(130, 60, 110, 60);
        }
        it.printf(195, 65, id(roboto), TextAlign::BOTTOM_RIGHT , "%.0f", id(co2).state);
      }else{
        it.printf(195, 65, id(roboto), TextAlign::BOTTOM_RIGHT , "- - -");
      }
      it.printf(195, 88, id(roboto18), TextAlign::BOTTOM_RIGHT , "ppm (CO2)");
      
      if (id(temperature).has_state()) { // Temperature
        it.printf(195, 138, id(roboto_mid), TextAlign::BOTTOM_RIGHT , "%.1f°", id(temperature).state);
      }else{
        it.printf(195, 138, id(roboto_mid), TextAlign::BOTTOM_RIGHT , "--.-°");
      }

      if(id(ac).mode != 0){
        it.printf(195, 200, id(roboto_big), TextAlign::BOTTOM_RIGHT , "%.1f°", id(ac).target_temperature);
        if(id(ac).mode == 2){
        it.image(0, 130, id(snowflake_image));
        }else if(id(ac).mode == 3){
          it.image(0, 125, id(fire_image));
        }
      }else{
        it.image(0, 100, id(power_image));
        it.printf(195, 200, id(roboto_big), TextAlign::BOTTOM_RIGHT , "OFF");
      }
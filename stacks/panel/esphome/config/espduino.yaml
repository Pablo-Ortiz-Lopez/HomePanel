esphome:
  name: "espduino"

esp32:
  board: esp32dev

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-9A2D60"
    password: "h5hSzz0f91ta"

mqtt:
  broker: !secret mqtt_broker
  username: "pablo"
  password: !secret mqtt_password
  id: mqtt_client
  
i2c:
  sda: GPIO4
  scl: GPIO5

remote_transmitter:
  pin: GPIO14
  carrier_duty_percent: 50%

climate:
  - platform: mitsubishi
    name: "AC Comedor"
    id: ac
    on_state:
      - component.update: eink
  
sensor:
  - platform: mqtt_subscribe
    name: "Comedor Temperature"
    id: temperature
    topic: comedor-ac/sensor/comedor_temperature/state

  - platform: mqtt_subscribe
    name: "Comedor Humidity"
    id: humidity
    topic: comedor-ac/sensor/comedor_humidity/state
    
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifi_db
    update_interval: 5s
    on_value_range:
      - above: -1000
        below: 1000
        then:
          - component.update: eink

image:
  - file: "images/x.png"
    id: x_image
    resize: 25x25
    type: TRANSPARENT_IMAGE
  - file: "images/fire.png"
    id: fire_image
    resize: 70x70
    type: TRANSPARENT_IMAGE
  - file: "images/snowflake.png"
    id: snowflake_image
    resize: 55x55
    type: TRANSPARENT_IMAGE
  - file: "images/power.png"
    id: power_image
    resize: 90x90
    type: TRANSPARENT_IMAGE
  - file: "images/plug.png"
    id: plug_image
    resize: 25x25
    type: TRANSPARENT_IMAGE
    
font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 25
  - file: "gfonts://Roboto"
    id: roboto_mid
    size: 45
  - file: "gfonts://Roboto"
    id: roboto_big
    size: 60

time:
  - id: reloj
    platform: sntp
    timezone: Europe/Madrid
    on_time:
      # Every minute
      - seconds: 0
        minutes: /1
        then:
          - component.update: eink

spi:
  clk_pin: 18
  mosi_pin: 23

display:
  - platform: waveshare_epaper
    id: eink
    cs_pin: 5
    dc_pin: 19
    reset_pin: 26
    busy_pin: 25
    model: 1.54inv2
    rotation: 90
    full_update_every: 1
    update_interval: 3600s
    reset_duration: 200ms
    lambda: |-
      it.image(0, 0, id(plug_image));
      
      auto time = id(reloj).now();
      
      if(time.is_valid()){
        it.printf(70,0,id(roboto), TextAlign::TOP_LEFT, "%02d:%02d", time.hour, time.minute);
      }

      if(id(wifi_db).has_state()){ // WIFI OK
        if (!id(mqtt_client)->is_connected()) { // MQTT KO
          it.printf(175, 0, id(roboto), TextAlign::TOP_LEFT , "!");
        }else{ // WIFI & MQTT OK
          it.filled_rectangle(150, 20, 8, 5); // 1 Bar

          if(id(wifi_db).has_state() && id(wifi_db).state > -80){ // 2 Bars
            it.filled_rectangle(160, 15, 8, 10);
          }else{
            it.rectangle(160, 15, 8, 10);
          }

          if(id(wifi_db).has_state() && id(wifi_db).state > -70){ // 3 Bars
            it.filled_rectangle(170, 10, 8, 15);
          }else{
            it.rectangle(170, 10, 8, 15);
          }

          if(id(wifi_db).has_state() && id(wifi_db).state > -60){ // 4 Bars
            it.filled_rectangle(180, 5, 8, 20);
          }else{
            it.rectangle(180, 5, 8, 20);
          }

          if(id(wifi_db).has_state() && id(wifi_db).state > -50){ // 5 Bars
            it.filled_rectangle(190, 0, 8, 25);
          }else{
            it.rectangle(190, 0, 8, 25);
          }
        }
      }else{ // WIFI KO
        it.image(175, 0, id(x_image));
      }
      
      if (id(humidity).has_state()) { // Humidity
        it.printf(0, 30, id(roboto), TextAlign::TOP_LEFT , "Humedad: %.1f%%", id(humidity).state);
      }else{
        it.printf(0, 30, id(roboto), TextAlign::TOP_LEFT , "Humedad: --.-%%");
      }

      it.printf(0, 56, id(roboto), TextAlign::TOP_LEFT , "Temperatura:");
      if (id(temperature).has_state()) { // Temperature
        it.printf(200, 138, id(roboto_mid), TextAlign::BOTTOM_RIGHT , "%.1f°", id(temperature).state);
      }else{
        it.printf(200, 138, id(roboto_mid), TextAlign::BOTTOM_RIGHT , "--.-°");
      }

      if(id(ac).mode != 0){
        it.printf(200, 200, id(roboto_big), TextAlign::BOTTOM_RIGHT , "%.1f°", id(ac).target_temperature);
        if(id(ac).mode == 2){
        it.image(0, 130, id(snowflake_image));
        }else if(id(ac).mode == 3){
          it.image(0, 125, id(fire_image));
        }
      }else{
        it.image(0, 100, id(power_image));
        it.printf(200, 200, id(roboto_big), TextAlign::BOTTOM_RIGHT , "OFF");
      }